[{"id":"f78e40b03f9d5173","type":"tab","label":"OptimusDB Operations Center","disabled":false,"info":"","env":[]},{"id":"f52d1fccbb340f47","type":"ui_base","theme":{"name":"theme-dark","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"Century Gothic,CenturyGothic,AppleGothic,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"},"themeState":{"base-color":{"default":"#097479","value":"#097479","edited":false},"page-titlebar-backgroundColor":{"value":"#097479","edited":false},"page-backgroundColor":{"value":"#111111","edited":false},"page-sidebar-backgroundColor":{"value":"#333333","edited":false},"group-textColor":{"value":"#0eb8c0","edited":false},"group-borderColor":{"value":"#555555","edited":false},"group-backgroundColor":{"value":"#333333","edited":false},"widget-textColor":{"value":"#eeeeee","edited":false},"widget-backgroundColor":{"value":"#097479","edited":false},"widget-borderColor":{"value":"#333333","edited":false},"base-font":{"value":"Century Gothic,CenturyGothic,AppleGothic,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey","palette":"light"}},"site":{"name":"Optimus DB Operations Panel","hideToolbar":"false","allowSwipe":"true","lockMenu":"true","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":1,"gy":1,"cx":6,"cy":6,"px":1,"py":1}}},{"id":"9ccbc4cd3b4098a1","type":"ui-base","name":"ui_template.label.myDashboard","path":"/dashboard","appIcon":"","includeClientData":true,"acceptsClientConfig":["ui-notification","ui-control"],"showPathInSidebar":false,"headerContent":"page","navigationStyle":"default","titleBarStyle":"default","showReconnectNotification":true,"notificationDisplayTime":1,"showDisconnectNotification":true,"allowInstall":true},{"id":"75f269841601a7e3","type":"ui-theme","name":"ui_template.themes.defaultTheme","colors":{"surface":"#ffffff","primary":"#0094CE","bgPage":"#eeeeee","groupBg":"#ffffff","groupOutline":"#cccccc"},"sizes":{"density":"default","pagePadding":"12px","groupGap":"12px","groupBorderRadius":"4px","widgetGap":"12px"}},{"id":"abc4dbc18f6bb3fe","type":"ui-page","name":"ui_template.layout.page 1","ui":"9ccbc4cd3b4098a1","path":"/page1","icon":"home","layout":"grid","theme":"75f269841601a7e3","breakpoints":[{"name":"Default","px":0,"cols":3},{"name":"Tablet","px":576,"cols":6},{"name":"Small Desktop","px":768,"cols":9},{"name":"Desktop","px":1024,"cols":12}],"order":2,"className":"","visible":"true","disabled":"false"},{"id":"a53da743523d7960","type":"ui-group","name":"ui_template.layout.group 1","page":"abc4dbc18f6bb3fe","width":6,"height":1,"order":1,"showTitle":true,"className":"","visible":"true","disabled":"false","groupType":"default"},{"id":"57ccccdc9990e3df","type":"ui-page","name":"OptimusDB Bar","ui":"9ccbc4cd3b4098a1","path":"/chart","icon":"home","layout":"grid","theme":"75f269841601a7e3","breakpoints":[{"name":"Default","px":"0","cols":"3"},{"name":"Tablet","px":"576","cols":"6"},{"name":"Small Desktop","px":"768","cols":"9"},{"name":"Desktop","px":"1024","cols":"12"}],"order":1,"className":"","visible":true,"disabled":"false"},{"id":"02b87b9278707a8a","type":"ui-group","name":"OptimusDB Dashboard","page":"57ccccdc9990e3df","width":6,"height":1,"order":1,"showTitle":true,"className":"","visible":true,"disabled":true,"groupType":"default"},{"id":"072343ae4ed21cf8","type":"ui_tab","name":"OptimusDB Agents Log Timeline","icon":"dashboard","disabled":false,"hidden":false},{"id":"dashboard_group","type":"ui_group","name":"Agents Timeline of Events","tab":"072343ae4ed21cf8","order":1,"disp":true,"width":34,"collapse":false,"className":""},{"id":"5fead54e98583d5c","type":"ui_tab","name":"Agents Overview","icon":"dashboard","disabled":false,"hidden":false},{"id":"41ccaa960f570aea","type":"ui_group","name":"Agent #2 Metrics","tab":"5fead54e98583d5c","order":2,"disp":true,"width":25,"collapse":false,"className":""},{"id":"1359ef53a46a65a7","type":"ui_group","name":"Agent #3 Metrics","tab":"5fead54e98583d5c","order":3,"disp":true,"width":25,"collapse":false,"className":""},{"id":"adeea17e9271096c","type":"ui_group","name":"Agent #4 Metrics","tab":"5fead54e98583d5c","order":4,"disp":true,"width":25,"collapse":false,"className":""},{"id":"2a95c9ef70718bb4","type":"ui_group","name":"Agent #5 Metrics","tab":"5fead54e98583d5c","order":5,"disp":true,"width":15,"collapse":false,"className":""},{"id":"dcc3326caa012b44","type":"ui_link","name":"Swarmchestrate","link":"https://www.swarmchestrate.eu/","icon":"open_in_browser","target":"newtab","order":4},{"id":"agent_ui_group","type":"ui_group","name":"Agent #1 Metrics","tab":"5fead54e98583d5c","order":1,"disp":true,"width":25,"collapse":false,"className":""},{"id":"5075a7d8e4947586","type":"ui-theme","name":"Default Theme","colors":{"surface":"#ffffff","primary":"#0094CE","bgPage":"#eeeeee","groupBg":"#ffffff","groupOutline":"#cccccc"},"sizes":{"pagePadding":"12px","groupGap":"12px","groupBorderRadius":"4px","widgetGap":"12px"}},{"id":"d0621b8f20aee671","type":"ui-page","name":"Charts","ui":"9ccbc4cd3b4098a1","path":"/charts","icon":"home","layout":"notebook","theme":"5075a7d8e4947586","order":3,"className":"","visible":"true","disabled":"false"},{"id":"b429518aee48a6fb","type":"ui-group","name":"Chart Examples","page":"d0621b8f20aee671","width":"6","height":"1","order":1,"showTitle":true,"className":"","visible":"true","disabled":"false"},{"id":"207eb57fbe40c775","type":"ui_tab","name":"Agent Topology View","icon":"dashboard","disabled":false,"hidden":false},{"id":"cb0e236ca4eaa6b0","type":"ui_group","name":"Agent Topology View","tab":"207eb57fbe40c775","order":1,"disp":true,"width":30,"collapse":false,"className":""},{"id":"d982686d7c802b40","type":"inject","z":"f78e40b03f9d5173","name":"Trigger Logs Fetch","props":[],"repeat":"60","crontab":"","once":true,"onceDelay":"1","topic":"","x":180,"y":60,"wires":[["ec62d0ace7a78c27"]]},{"id":"ec62d0ace7a78c27","type":"function","z":"f78e40b03f9d5173","name":"Constructor","func":"const date = new Date();\n\nconst yyyy = date.getUTCFullYear();\nconst month = String(date.getUTCMonth() + 1).padStart(2, '0'); // month is 0-indexed\nconst day = String(date.getUTCDate()).padStart(2, '0');\n//const hour = String(date.getUTCHours()).padStart(2, '0');\n//const minute = String(date.getUTCMinutes()).padStart(2, '0');\nconst hour='09';\n\nconst minute='52';\n\n\n//node.warn(`Using UTC time: ${hour}:${minute} on ${yyyy}-${month}-${day}`);\n\nconst nodePorts = [18001, 18002, 18003];\n//const nodePorts = [18001];\nconst baseUrl = \"http://localhost:\";\n\nconst requests = nodePorts.map(port => ({\n    url: `${baseUrl}${port}/swarmkb/log?date=${yyyy}-${month}-${day}&hour=${hour}&minute=${minute}`,\n    node: `node-${port}`\n}));\n\nreturn [{ payload: requests }];\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":170,"y":120,"wires":[["329eddc328f60955"]]},{"id":"01e10e4eb63d625c","type":"http request","z":"f78e40b03f9d5173","name":"Fetch Logs","method":"POST","ret":"obj","paytoqs":"body","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":150,"y":300,"wires":[["528815b47a430240","489b80d414c431d2"]]},{"id":"render_table","type":"ui_template","z":"f78e40b03f9d5173","group":"dashboard_group","name":"Log Table","order":1,"width":0,"height":0,"format":"<div style=\"width: 100vw; height: 90vh; overflow-y: auto;\">\n  <table border=\"1\"\n    style=\"width: 100%; height: 100%; table-layout: auto; word-wrap: break-word; font-size: 12px; border-collapse: collapse;\">\n    <thead>\n      <tr style=\"background: #097479;\">\n        <th style=\"padding: 6px;\">A/A</th> <!-- Line number column -->\n        <th style=\"padding: 6px;\">Timestamp</th>\n        <th style=\"padding: 6px;\">Level</th>\n        <th style=\"padding: 6px;\">Message</th>\n        <th style=\"padding: 6px;\">Source</th>\n        <th style=\"padding: 6px;\">Agent ID</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr ng-repeat=\"log in msg.payload.agentLogs_flat\">\n        <td style=\"padding: 6px;\">{{log.line}}</td> <!-- A/A column -->\n        <td style=\"padding: 6px;\">{{log.timestamp}}</td>\n        <td style=\"padding: 6px;\">{{log.level}}</td>\n        <td style=\"padding: 6px;\">{{log.message}}</td>\n        <td style=\"padding: 6px;\">{{log.source}}</td>\n        <td style=\"padding: 6px;\">{{log.node}}</td>\n      </tr>\n    </tbody>\n  </table>\n</div>","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"local","className":"","x":600,"y":520,"wires":[["d3740aa9f552118b"]]},{"id":"528815b47a430240","type":"function","z":"f78e40b03f9d5173","name":"function 1","func":"if (Array.isArray(msg.payload)) {\n    let nodeId = \"unknown\";\n\n    // Extract port from URL like \"http://localhost:18003/...\"\n    const url = msg.url || \"\";\n    const match = url.match(/localhost:(\\d+)/);\n    if (match && match[1]) {\n        nodeId = `node-${match[1]}`;\n    }\n\n    msg.payload = msg.payload.map(log => {\n        log.node = nodeId;\n        return log;\n    });\n}\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":160,"y":360,"wires":[["54206c6ecacbf6e3","2d602a2b0fb95a60","0dd4bb58b1d23402","b387c0512ad670cf"]]},{"id":"329eddc328f60955","type":"split","z":"f78e40b03f9d5173","name":"splitOptimusDB","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":160,"y":180,"wires":[["444fb0fd99eefb7b"]]},{"id":"444fb0fd99eefb7b","type":"function","z":"f78e40b03f9d5173","name":"function 2","func":"msg.url = msg.payload.url;\nmsg.headers = msg.headers || {};\nmsg.headers._node = msg.payload.node;\nmsg.payload = {};\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":160,"y":240,"wires":[["01e10e4eb63d625c","526a10120ab0f1ab"]]},{"id":"526a10120ab0f1ab","type":"debug","z":"f78e40b03f9d5173","name":"debug 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":420,"y":240,"wires":[]},{"id":"54206c6ecacbf6e3","type":"debug","z":"f78e40b03f9d5173","name":"Array_Debug","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":410,"y":360,"wires":[]},{"id":"2d602a2b0fb95a60","type":"function","z":"f78e40b03f9d5173","name":"Live Log Formatter","func":"const logs = Array.isArray(msg.payload) ? msg.payload : [];\nconst previous = context.get(\"logBuffer\") || [];\nconst agentMap = {}; // map of node => logs array\n\nlogs.forEach(log => {\n    const timestamp = log.timestamp || \"N/A\";\n    const level = (log.level || \"INFO\").padEnd(10, \" \");\n    const node = (log.node || \"unknown\").padEnd(12, \" \");\n    const rawNode = log.node || \"unknown\";\n    const message = log.message || \"\";\n\n    // Format line with indentation for multiline messages\n    const formattedMessage = message\n        .split(\"\\n\")\n        .map((line, idx) => idx === 0 ? line : \"    \" + line)\n        .join(\"\\n\");\n\n    const line = `[${timestamp}] [${level}] [${node}] ${formattedMessage}`;\n    previous.push(line);\n\n    // Store per-agent log line\n    if (!agentMap[rawNode]) agentMap[rawNode] = [];\n    agentMap[rawNode].push(line);\n});\n\n// Limit live buffer to last 100 lines\nif (previous.length > 100) previous.splice(0, previous.length - 100);\ncontext.set(\"logBuffer\", previous);\n\n// Convert map to array for UI\nconst agentLogs = Object.entries(agentMap).map(([node, logLines]) => ({\n    node,\n    logs: logLines.join(\"\\n\\n\")\n}));\n\nmsg.payload = {\n    live: previous.join(\"\\n\\n\"),\n    agentLogs\n};\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":440,"wires":[["4eccceb2a6917e42"]]},{"id":"4eccceb2a6917e42","type":"debug","z":"f78e40b03f9d5173","name":"Beauty1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":960,"y":440,"wires":[]},{"id":"489b80d414c431d2","type":"debug","z":"f78e40b03f9d5173","name":"Fetched details_Debug","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":440,"y":300,"wires":[]},{"id":"0dd4bb58b1d23402","type":"function","z":"f78e40b03f9d5173","name":"Live Log Formatter2","func":"const logs = Array.isArray(msg.payload) ? msg.payload : [];\n\nconst buffer = context.get(\"logBuffer\") || [];\nconst tableData = context.get(\"tableBuffer\") || [];\nlet lineNumber = context.get(\"logLineNumber\") || 1;\n\nlogs.forEach(log => {\n    const line = `[${lineNumber}] [${log.timestamp}] [${log.level || 'INFO'}] [${log.node || 'unknown'}] ${log.message}`;\n    buffer.push(line);\n\n    tableData.push({\n        line: lineNumber,\n        timestamp: log.timestamp,\n        level: log.level || 'INFO',\n        message: log.message || '',\n        source: log.source || '',\n        node: log.node || 'unknown'\n    });\n\n    lineNumber++;\n});\n\n// Trim history to last 100\nif (buffer.length > 100) buffer.splice(0, buffer.length - 100);\nif (tableData.length > 100) tableData.splice(0, tableData.length - 100);\n\n// Save context\ncontext.set(\"logBuffer\", buffer);\ncontext.set(\"tableBuffer\", tableData);\ncontext.set(\"logLineNumber\", lineNumber);\n\n// Final output\nmsg.payload = {\n    live: buffer.join(\"\\n\"),\n    agentLogs_flat: tableData\n};\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":170,"y":520,"wires":[["render_table","a1115bcab8cb67dd"]]},{"id":"de8eed0e29804134","type":"debug","z":"f78e40b03f9d5173","name":"Beauty5","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":340,"y":720,"wires":[]},{"id":"d3740aa9f552118b","type":"debug","z":"f78e40b03f9d5173","name":"Beauty4","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":860,"y":520,"wires":[]},{"id":"a5_ui_linechart","type":"ui_chart","z":"f78e40b03f9d5173","name":"CPU/MEM","group":"agent_ui_group","order":3,"width":5,"height":6,"label":"Performance","chartType":"line","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No Agent data","dot":true,"ymin":"0","ymax":"100","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1040,"y":620,"wires":[[]],"icon":"font-awesome/fa-area-chart"},{"id":"a6_ui_barchart","type":"ui_chart","z":"f78e40b03f9d5173","name":"Bar Metrics","group":"agent_ui_group","order":2,"width":5,"height":6,"label":"Replication & IO","chartType":"bar","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1050,"y":700,"wires":[[]]},{"id":"a7_ui_role","type":"ui_text","z":"f78e40b03f9d5173","group":"agent_ui_group","order":1,"width":4,"height":1,"name":"Node Role","label":"Agent Role","format":"{{msg.payload.role}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":720,"y":660,"wires":[]},{"id":"a1115bcab8cb67dd","type":"debug","z":"f78e40b03f9d5173","name":"Beauty3","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":460,"y":580,"wires":[]},{"id":"b387c0512ad670cf","type":"function","z":"f78e40b03f9d5173","name":"Metrics Formatter","func":"const logs = Array.isArray(msg.payload) ? msg.payload : [];\n\n//const buffer = context.get(\"logBuffer\") || [];\nconst tableData = context.get(\"tableBuffer\") || [];\nconst randomMetric = (min, max, decimals = 0) => {\n    const value = Math.random() * (max - min) + min;\n    return +value.toFixed(decimals);\n};\n\nlogs.forEach(log => {\n\n    tableData.push({\n        timestamp: log.timestamp,\n        //level: log.level || 'INFO',\n        //message: log.message || '',\n        source: log.source || '',\n        node: log.node || 'unknown',\n        cpu: +(Math.random() * 100).toFixed(2),\n        mem: +(Math.random() * 100).toFixed(2),\n        latency: +(Math.random() * 250).toFixed(2),\n        health: +(Math.random() * 100).toFixed(2),\n        replication: Math.floor(Math.random() * 1000),\n        io: +(Math.random() * 100).toFixed(2),\n        queryRate: +(Math.random() * 50).toFixed(2),\n        role: Math.random() > 0.5 ? 'Coordinator' : 'Follower',\n        ///////\n        uptimeAgent: randomMetric(80, 100),               // Uptime (10%)\n        leadershipCountAgent: randomMetric(0, 50),        // Leadership Count (15%)\n        latencyAgent: randomMetric(10, 150),              // Latency (25%)\n        memoryAvailableAgent: randomMetric(40, 100),      // Available Memory (10%)\n        responsivenessAgent: randomMetric(60, 100),       // Responsiveness (10%)\n        cpuLoadAgent: randomMetric(5, 60),                // CPU Load (5%)\n        storageAvailableAgent: randomMetric(50, 100),     // Storage Availability (5%)\n        healthProjectedAgent: randomMetric(50, 100)       // Projected Health Score (20%)\n    });\n});\n\ncontext.set(\"tableBuffer\", tableData);\n\n\n// Final output\nmsg.payload = {\n    agentLogs_flat: tableData\n};\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":90,"y":680,"wires":[["4c8a2c445896de98","31159392f58cb1fc","ae39ca0ab634cbce"]]},{"id":"4c8a2c445896de98","type":"function","z":"f78e40b03f9d5173","name":"Metrics Formatter_Split","func":"const logs = msg.payload.agentLogs_flat || [];\nconst grouped = {};\n\nlogs.forEach(log => {\n    if (!grouped[log.node]) grouped[log.node] = [];\n    grouped[log.node].push(log);\n});\n\nconst outputs = Object.entries(grouped).map(([node, entries]) => {\n    return { payload: entries, topic: node };\n});\n\nreturn [outputs];\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":140,"y":820,"wires":[["de8eed0e29804134","b70ea7517c73c5b0"]]},{"id":"a4_ui_gauge","type":"ui_gauge","z":"f78e40b03f9d5173","name":"Health Gauge","group":"agent_ui_group","order":6,"width":4,"height":4,"gtype":"gage","title":"Health","label":"%","format":"{{msg.payload.health}}","min":0,"max":100,"colors":["#00b500","#e6e600","#ca3838"],"seg1":"65","seg2":"85","diff":false,"className":"","x":730,"y":580,"wires":[]},{"id":"60b9fca56574e64b","type":"ui_text","z":"f78e40b03f9d5173","group":"agent_ui_group","order":5,"width":4,"height":1,"name":"Agent Name","label":"Agent Name","format":"{{msg.payload.node}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":910,"y":660,"wires":[]},{"id":"0da6942dfe0c11c3","type":"split","z":"f78e40b03f9d5173","name":"","splt":"topic","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":510,"y":660,"wires":[["a7_ui_role","60b9fca56574e64b","a4_ui_gauge","0fc44a0137bda952","338631521102fed2","917d6a3bfe2842d1"]]},{"id":"b70ea7517c73c5b0","type":"switch","z":"f78e40b03f9d5173","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"node-18001","vt":"str"},{"t":"eq","v":"node-18002","vt":"str"},{"t":"eq","v":"node-18003","vt":"str"},{"t":"eq","v":"node-18004","vt":"str"},{"t":"eq","v":"node-18005","vt":"str"}],"checkall":"true","repair":false,"outputs":5,"x":370,"y":820,"wires":[["0da6942dfe0c11c3"],["093f3e784a275600"],["666a9d76e2ce9685"],["3d8069944e05fcad"],[]]},{"id":"0fc44a0137bda952","type":"function","z":"f78e40b03f9d5173","name":"computingShapeFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\nconst timestamp = Date.now();\n\n// Retrieve buffer or initialize\nlet buffer = context.get(\"metricsBuffer\") || {\n  cpu: [],\n  mem: []\n  //latency: []\n};\n\n// Append new point\nbuffer.cpu.push({ x: timestamp, y: metrics.cpu });\nbuffer.mem.push({ x: timestamp, y: metrics.mem });\n//buffer.latency.push({ x: timestamp, y: metrics.latency });\n\n// Limit to last 20 samples\n[\"cpu\", \"mem\"].forEach(key => {\n  if (buffer[key].length > 20) buffer[key].shift();\n});\n\n// Store back to context\ncontext.set(\"metricsBuffer\", buffer);\n\n// Construct chart payload\nmsg.topic = nodeId;\nmsg.payload = [{\n  series: [\"CPU\", \"MEM\"],\n  data: [\n    buffer.cpu,\n    buffer.mem\n    //buffer.latency\n  ],\n  labels: [\"\"] // Required but not used in this format\n}];\n\nreturn msg;\n\n//George\n\n/*\n[{\n\"series\": [\"A\", \"B\", \"C\"],\n\"data\": [\n    [{ \"x\": 1504029632890, \"y\": 5 },\n     { \"x\": 1504029636001, \"y\": 4 },\n     { \"x\": 1504029638656, \"y\": 2 }\n    ],\n    [{ \"x\": 1504029633514, \"y\": 6 },\n     { \"x\": 1504029636622, \"y\": 7 },\n     { \"x\": 1504029639539, \"y\": 6 }\n    ],\n    [{ \"x\": 1504029634400, \"y\": 7 },\n     { \"x\": 1504029637959, \"y\": 7 },\n     { \"x\": 1504029640317, \"y\": 7 }\n    ]\n],\n\"labels\": [\"\"]\n}]\n*/","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":770,"y":620,"wires":[["a5_ui_linechart"]]},{"id":"338631521102fed2","type":"function","z":"f78e40b03f9d5173","name":"StatsAgentFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\n\n// Optional: Timestamp or fixed label\nconst label = new Date().toLocaleTimeString();\n\n// Format for bar chart\nmsg.topic = nodeId;\nmsg.payload = [{\n    series: [\"Replication\", \"IO\", \"QueryRate\"],\n    data: [\n        [metrics.replication || 0],\n        [metrics.io || 0],\n        [metrics.queryRate || 0]\n    ],\n    labels: [label]\n}];\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":760,"y":700,"wires":[["a6_ui_barchart"]]},{"id":"5a7770c7c7604657","type":"ui_chart","z":"f78e40b03f9d5173","name":"Ellection Metrics","group":"agent_ui_group","order":4,"width":11,"height":6,"label":"Ellection Metrics","chartType":"bar","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1040,"y":760,"wires":[[]]},{"id":"917d6a3bfe2842d1","type":"function","z":"f78e40b03f9d5173","name":"StatsAgentFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\n\n// Timestamp label (optional: for grouping, can also use a fixed label like \"now\")\nconst label = new Date().toLocaleTimeString();\n\n// Format for bar chart using the desired metrics\nmsg.topic = nodeId;\nmsg.payload = [{\n    series: [\n        \"Uptime\",\n        \"Leadership Count\",\n        \"Latency\",\n        \"Memory\",\n        \"Responsiveness\",\n        \"CPU Load\",\n        \"Storage\",\n        \"Health Score\"\n    ],\n    data: [\n        [metrics.uptimeAgent || 0],\n        [metrics.leadershipCountAgent || 0],\n        [metrics.latencyAgent || 0],\n        [metrics.memoryAvailableAgent || 0],\n        [metrics.responsivenessAgent || 0],\n        [metrics.cpuLoadAgent || 0],\n        [metrics.storageAvailableAgent || 0],\n        [metrics.healthProjectedAgent || 0]\n    ],\n    labels: [label]\n}];\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":760,"y":760,"wires":[["5a7770c7c7604657"]]},{"id":"baf068d37e46dda4","type":"ui_chart","z":"f78e40b03f9d5173","name":"CPU/MEM","group":"41ccaa960f570aea","order":3,"width":5,"height":6,"label":"Performance","chartType":"line","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No Agent data","dot":true,"ymin":"0","ymax":"100","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1100,"y":880,"wires":[[]],"icon":"font-awesome/fa-area-chart"},{"id":"398ddcdbbb4af371","type":"ui_chart","z":"f78e40b03f9d5173","name":"Bar Metrics","group":"41ccaa960f570aea","order":2,"width":5,"height":6,"label":"Replication & IO","chartType":"bar","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1110,"y":960,"wires":[[]]},{"id":"3ede108a18b61a87","type":"ui_text","z":"f78e40b03f9d5173","group":"41ccaa960f570aea","order":1,"width":4,"height":1,"name":"Node Role","label":"Agent Role","format":"{{msg.payload.role}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":780,"y":920,"wires":[]},{"id":"d72cdcecc6206499","type":"ui_gauge","z":"f78e40b03f9d5173","name":"Health Gauge","group":"41ccaa960f570aea","order":6,"width":4,"height":4,"gtype":"gage","title":"Health","label":"%","format":"{{msg.payload.health}}","min":0,"max":100,"colors":["#00b500","#e6e600","#ca3838"],"seg1":"65","seg2":"85","diff":false,"className":"","x":790,"y":840,"wires":[]},{"id":"d8d0199d398c0a88","type":"ui_text","z":"f78e40b03f9d5173","group":"41ccaa960f570aea","order":5,"width":4,"height":1,"name":"Agent Name","label":"Agent Name","format":"{{msg.payload.node}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":970,"y":920,"wires":[]},{"id":"093f3e784a275600","type":"split","z":"f78e40b03f9d5173","name":"","splt":"topic","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":570,"y":920,"wires":[["3ede108a18b61a87","d8d0199d398c0a88","d72cdcecc6206499","762beff611abc59a","7848defb3b3fa6a4","5e82fd42b963c046"]]},{"id":"762beff611abc59a","type":"function","z":"f78e40b03f9d5173","name":"computingShapeFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\nconst timestamp = Date.now();\n\n// Retrieve buffer or initialize\nlet buffer = context.get(\"metricsBuffer\") || {\n  cpu: [],\n  mem: []\n  //latency: []\n};\n\n// Append new point\nbuffer.cpu.push({ x: timestamp, y: metrics.cpu });\nbuffer.mem.push({ x: timestamp, y: metrics.mem });\n//buffer.latency.push({ x: timestamp, y: metrics.latency });\n\n// Limit to last 20 samples\n[\"cpu\", \"mem\"].forEach(key => {\n  if (buffer[key].length > 20) buffer[key].shift();\n});\n\n// Store back to context\ncontext.set(\"metricsBuffer\", buffer);\n\n// Construct chart payload\nmsg.topic = nodeId;\nmsg.payload = [{\n  series: [\"CPU\", \"MEM\"],\n  data: [\n    buffer.cpu,\n    buffer.mem\n    //buffer.latency\n  ],\n  labels: [\"\"] // Required but not used in this format\n}];\n\nreturn msg;\n\n//George\n\n/*\n[{\n\"series\": [\"A\", \"B\", \"C\"],\n\"data\": [\n    [{ \"x\": 1504029632890, \"y\": 5 },\n     { \"x\": 1504029636001, \"y\": 4 },\n     { \"x\": 1504029638656, \"y\": 2 }\n    ],\n    [{ \"x\": 1504029633514, \"y\": 6 },\n     { \"x\": 1504029636622, \"y\": 7 },\n     { \"x\": 1504029639539, \"y\": 6 }\n    ],\n    [{ \"x\": 1504029634400, \"y\": 7 },\n     { \"x\": 1504029637959, \"y\": 7 },\n     { \"x\": 1504029640317, \"y\": 7 }\n    ]\n],\n\"labels\": [\"\"]\n}]\n*/","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":830,"y":880,"wires":[["baf068d37e46dda4"]]},{"id":"7848defb3b3fa6a4","type":"function","z":"f78e40b03f9d5173","name":"StatsAgentFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\n\n// Optional: Timestamp or fixed label\nconst label = new Date().toLocaleTimeString();\n\n// Format for bar chart\nmsg.topic = nodeId;\nmsg.payload = [{\n    series: [\"Replication\", \"IO\", \"QueryRate\"],\n    data: [\n        [metrics.replication || 0],\n        [metrics.io || 0],\n        [metrics.queryRate || 0]\n    ],\n    labels: [label]\n}];\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":960,"wires":[["398ddcdbbb4af371"]]},{"id":"5d47d91af226b421","type":"ui_chart","z":"f78e40b03f9d5173","name":"Ellection Metrics","group":"41ccaa960f570aea","order":4,"width":11,"height":6,"label":"Ellection Metrics","chartType":"bar","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1100,"y":1020,"wires":[[]]},{"id":"5e82fd42b963c046","type":"function","z":"f78e40b03f9d5173","name":"StatsAgentFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\n\n// Timestamp label (optional: for grouping, can also use a fixed label like \"now\")\nconst label = new Date().toLocaleTimeString();\n\n// Format for bar chart using the desired metrics\nmsg.topic = nodeId;\nmsg.payload = [{\n    series: [\n        \"Uptime\",\n        \"Leadership Count\",\n        \"Latency\",\n        \"Memory\",\n        \"Responsiveness\",\n        \"CPU Load\",\n        \"Storage\",\n        \"Health Score\"\n    ],\n    data: [\n        [metrics.uptimeAgent || 0],\n        [metrics.leadershipCountAgent || 0],\n        [metrics.latencyAgent || 0],\n        [metrics.memoryAvailableAgent || 0],\n        [metrics.responsivenessAgent || 0],\n        [metrics.cpuLoadAgent || 0],\n        [metrics.storageAvailableAgent || 0],\n        [metrics.healthProjectedAgent || 0]\n    ],\n    labels: [label]\n}];\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":1020,"wires":[["5d47d91af226b421"]]},{"id":"7a9cbffa84893ff9","type":"ui_chart","z":"f78e40b03f9d5173","name":"CPU/MEM","group":"1359ef53a46a65a7","order":3,"width":5,"height":6,"label":"Performance","chartType":"line","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No Agent data","dot":true,"ymin":"0","ymax":"100","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1100,"y":1120,"wires":[[]],"icon":"font-awesome/fa-area-chart"},{"id":"2b4735597c226956","type":"ui_chart","z":"f78e40b03f9d5173","name":"Bar Metrics","group":"1359ef53a46a65a7","order":2,"width":5,"height":6,"label":"Replication & IO","chartType":"bar","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1110,"y":1200,"wires":[[]]},{"id":"dab554fd3dd1d939","type":"ui_text","z":"f78e40b03f9d5173","group":"1359ef53a46a65a7","order":1,"width":4,"height":1,"name":"Node Role","label":"Agent Role","format":"{{msg.payload.role}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":780,"y":1160,"wires":[]},{"id":"3b27f14a31d1f1c2","type":"ui_gauge","z":"f78e40b03f9d5173","name":"Health Gauge","group":"1359ef53a46a65a7","order":6,"width":4,"height":4,"gtype":"gage","title":"Health","label":"%","format":"{{msg.payload.health}}","min":0,"max":100,"colors":["#00b500","#e6e600","#ca3838"],"seg1":"65","seg2":"85","diff":false,"className":"","x":790,"y":1080,"wires":[]},{"id":"7e08a968f00260a7","type":"ui_text","z":"f78e40b03f9d5173","group":"1359ef53a46a65a7","order":5,"width":4,"height":1,"name":"Agent Name","label":"Agent Name","format":"{{msg.payload.node}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":970,"y":1160,"wires":[]},{"id":"666a9d76e2ce9685","type":"split","z":"f78e40b03f9d5173","name":"","splt":"topic","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":570,"y":1160,"wires":[["dab554fd3dd1d939","7e08a968f00260a7","3b27f14a31d1f1c2","92161f501e11eae4","8c7dae31f2ff85e3","a7ebe51973b2401f"]]},{"id":"92161f501e11eae4","type":"function","z":"f78e40b03f9d5173","name":"computingShapeFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\nconst timestamp = Date.now();\n\n// Retrieve buffer or initialize\nlet buffer = context.get(\"metricsBuffer\") || {\n  cpu: [],\n  mem: []\n  //latency: []\n};\n\n// Append new point\nbuffer.cpu.push({ x: timestamp, y: metrics.cpu });\nbuffer.mem.push({ x: timestamp, y: metrics.mem });\n//buffer.latency.push({ x: timestamp, y: metrics.latency });\n\n// Limit to last 20 samples\n[\"cpu\", \"mem\"].forEach(key => {\n  if (buffer[key].length > 20) buffer[key].shift();\n});\n\n// Store back to context\ncontext.set(\"metricsBuffer\", buffer);\n\n// Construct chart payload\nmsg.topic = nodeId;\nmsg.payload = [{\n  series: [\"CPU\", \"MEM\"],\n  data: [\n    buffer.cpu,\n    buffer.mem\n    //buffer.latency\n  ],\n  labels: [\"\"] // Required but not used in this format\n}];\n\nreturn msg;\n\n//George\n\n/*\n[{\n\"series\": [\"A\", \"B\", \"C\"],\n\"data\": [\n    [{ \"x\": 1504029632890, \"y\": 5 },\n     { \"x\": 1504029636001, \"y\": 4 },\n     { \"x\": 1504029638656, \"y\": 2 }\n    ],\n    [{ \"x\": 1504029633514, \"y\": 6 },\n     { \"x\": 1504029636622, \"y\": 7 },\n     { \"x\": 1504029639539, \"y\": 6 }\n    ],\n    [{ \"x\": 1504029634400, \"y\": 7 },\n     { \"x\": 1504029637959, \"y\": 7 },\n     { \"x\": 1504029640317, \"y\": 7 }\n    ]\n],\n\"labels\": [\"\"]\n}]\n*/","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":830,"y":1120,"wires":[["7a9cbffa84893ff9"]]},{"id":"8c7dae31f2ff85e3","type":"function","z":"f78e40b03f9d5173","name":"StatsAgentFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\n\n// Optional: Timestamp or fixed label\nconst label = new Date().toLocaleTimeString();\n\n// Format for bar chart\nmsg.topic = nodeId;\nmsg.payload = [{\n    series: [\"Replication\", \"IO\", \"QueryRate\"],\n    data: [\n        [metrics.replication || 0],\n        [metrics.io || 0],\n        [metrics.queryRate || 0]\n    ],\n    labels: [label]\n}];\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":1200,"wires":[["2b4735597c226956"]]},{"id":"8aeb922ec59ecac4","type":"ui_chart","z":"f78e40b03f9d5173","name":"Ellection Metrics","group":"1359ef53a46a65a7","order":4,"width":11,"height":6,"label":"Ellection Metrics","chartType":"bar","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1100,"y":1260,"wires":[[]]},{"id":"a7ebe51973b2401f","type":"function","z":"f78e40b03f9d5173","name":"StatsAgentFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\n\n// Timestamp label (optional: for grouping, can also use a fixed label like \"now\")\nconst label = new Date().toLocaleTimeString();\n\n// Format for bar chart using the desired metrics\nmsg.topic = nodeId;\nmsg.payload = [{\n    series: [\n        \"Uptime\",\n        \"Leadership Count\",\n        \"Latency\",\n        \"Memory\",\n        \"Responsiveness\",\n        \"CPU Load\",\n        \"Storage\",\n        \"Health Score\"\n    ],\n    data: [\n        [metrics.uptimeAgent || 0],\n        [metrics.leadershipCountAgent || 0],\n        [metrics.latencyAgent || 0],\n        [metrics.memoryAvailableAgent || 0],\n        [metrics.responsivenessAgent || 0],\n        [metrics.cpuLoadAgent || 0],\n        [metrics.storageAvailableAgent || 0],\n        [metrics.healthProjectedAgent || 0]\n    ],\n    labels: [label]\n}];\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":1260,"wires":[["8aeb922ec59ecac4"]]},{"id":"506b0efb062d1fea","type":"ui_chart","z":"f78e40b03f9d5173","name":"CPU/MEM","group":"adeea17e9271096c","order":3,"width":5,"height":6,"label":"Performance","chartType":"line","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No Agent data","dot":true,"ymin":"0","ymax":"100","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1100,"y":1380,"wires":[[]],"icon":"font-awesome/fa-area-chart"},{"id":"e913c7a95680f17b","type":"ui_chart","z":"f78e40b03f9d5173","name":"Bar Metrics","group":"adeea17e9271096c","order":2,"width":5,"height":6,"label":"Replication & IO","chartType":"bar","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1110,"y":1460,"wires":[[]]},{"id":"42bd7000011aede7","type":"ui_text","z":"f78e40b03f9d5173","group":"adeea17e9271096c","order":1,"width":4,"height":1,"name":"Node Role","label":"Agent Role","format":"{{msg.payload.role}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":780,"y":1420,"wires":[]},{"id":"b30ab3fb97b45f9b","type":"ui_gauge","z":"f78e40b03f9d5173","name":"Health Gauge","group":"adeea17e9271096c","order":6,"width":4,"height":4,"gtype":"gage","title":"Health","label":"%","format":"{{msg.payload.health}}","min":0,"max":100,"colors":["#00b500","#e6e600","#ca3838"],"seg1":"65","seg2":"85","diff":false,"className":"","x":790,"y":1340,"wires":[]},{"id":"2c6a56d671a66c35","type":"ui_text","z":"f78e40b03f9d5173","group":"adeea17e9271096c","order":5,"width":4,"height":1,"name":"Agent Name","label":"Agent Name","format":"{{msg.payload.node}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":970,"y":1420,"wires":[]},{"id":"3d8069944e05fcad","type":"split","z":"f78e40b03f9d5173","name":"","splt":"topic","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":570,"y":1420,"wires":[["42bd7000011aede7","2c6a56d671a66c35","b30ab3fb97b45f9b","908de511af890f9e","b6a2f28e00580161","925d9a5a37710f12"]]},{"id":"908de511af890f9e","type":"function","z":"f78e40b03f9d5173","name":"computingShapeFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\nconst timestamp = Date.now();\n\n// Retrieve buffer or initialize\nlet buffer = context.get(\"metricsBuffer\") || {\n  cpu: [],\n  mem: []\n  //latency: []\n};\n\n// Append new point\nbuffer.cpu.push({ x: timestamp, y: metrics.cpu });\nbuffer.mem.push({ x: timestamp, y: metrics.mem });\n//buffer.latency.push({ x: timestamp, y: metrics.latency });\n\n// Limit to last 20 samples\n[\"cpu\", \"mem\"].forEach(key => {\n  if (buffer[key].length > 20) buffer[key].shift();\n});\n\n// Store back to context\ncontext.set(\"metricsBuffer\", buffer);\n\n// Construct chart payload\nmsg.topic = nodeId;\nmsg.payload = [{\n  series: [\"CPU\", \"MEM\"],\n  data: [\n    buffer.cpu,\n    buffer.mem\n    //buffer.latency\n  ],\n  labels: [\"\"] // Required but not used in this format\n}];\n\nreturn msg;\n\n//George\n\n/*\n[{\n\"series\": [\"A\", \"B\", \"C\"],\n\"data\": [\n    [{ \"x\": 1504029632890, \"y\": 5 },\n     { \"x\": 1504029636001, \"y\": 4 },\n     { \"x\": 1504029638656, \"y\": 2 }\n    ],\n    [{ \"x\": 1504029633514, \"y\": 6 },\n     { \"x\": 1504029636622, \"y\": 7 },\n     { \"x\": 1504029639539, \"y\": 6 }\n    ],\n    [{ \"x\": 1504029634400, \"y\": 7 },\n     { \"x\": 1504029637959, \"y\": 7 },\n     { \"x\": 1504029640317, \"y\": 7 }\n    ]\n],\n\"labels\": [\"\"]\n}]\n*/","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":830,"y":1380,"wires":[["506b0efb062d1fea"]]},{"id":"b6a2f28e00580161","type":"function","z":"f78e40b03f9d5173","name":"StatsAgentFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\n\n// Optional: Timestamp or fixed label\nconst label = new Date().toLocaleTimeString();\n\n// Format for bar chart\nmsg.topic = nodeId;\nmsg.payload = [{\n    series: [\"Replication\", \"IO\", \"QueryRate\"],\n    data: [\n        [metrics.replication || 0],\n        [metrics.io || 0],\n        [metrics.queryRate || 0]\n    ],\n    labels: [label]\n}];\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":1460,"wires":[["e913c7a95680f17b"]]},{"id":"162575cb9c6b4b15","type":"ui_chart","z":"f78e40b03f9d5173","name":"Ellection Metrics","group":"adeea17e9271096c","order":4,"width":11,"height":6,"label":"Ellection Metrics","chartType":"bar","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":1100,"y":1520,"wires":[[]]},{"id":"925d9a5a37710f12","type":"function","z":"f78e40b03f9d5173","name":"StatsAgentFormatting","func":"const metrics = msg.payload;\nconst nodeId = metrics.node || \"unknown\";\n\n// Timestamp label (optional: for grouping, can also use a fixed label like \"now\")\nconst label = new Date().toLocaleTimeString();\n\n// Format for bar chart using the desired metrics\nmsg.topic = nodeId;\nmsg.payload = [{\n    series: [\n        \"Uptime\",\n        \"Leadership Count\",\n        \"Latency\",\n        \"Memory\",\n        \"Responsiveness\",\n        \"CPU Load\",\n        \"Storage\",\n        \"Health Score\"\n    ],\n    data: [\n        [metrics.uptimeAgent || 0],\n        [metrics.leadershipCountAgent || 0],\n        [metrics.latencyAgent || 0],\n        [metrics.memoryAvailableAgent || 0],\n        [metrics.responsivenessAgent || 0],\n        [metrics.cpuLoadAgent || 0],\n        [metrics.storageAvailableAgent || 0],\n        [metrics.healthProjectedAgent || 0]\n    ],\n    labels: [label]\n}];\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":1520,"wires":[["162575cb9c6b4b15"]]},{"id":"4e3f114d2ab0e093","type":"ui_template","z":"f78e40b03f9d5173","group":"cb0e236ca4eaa6b0","name":"","order":1,"width":0,"height":0,"format":"<style>\n    #topology-wrapper {\n        background-color: #111;\n        width: 100vw;\n        height: 100vh;\n        margin: 0;\n        padding: 0;\n    }\n\n    #topology-container {\n        width: 100%;\n        height: 100%;\n    }\n</style>\n\n<div id=\"topology-wrapper\">\n    <div id=\"topology-container\"></div>\n</div>\n\n<script src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"></script>\n<script>\n    (function(scope) {\n    let network;\n\n    function renderGraph(agents) {\n        const container = document.getElementById('topology-container');\n        container.innerHTML = '';\n\n        const nodes = [];\n        const edges = [];\n\n        agents.forEach(agent => {\n            // Main agent node\n            nodes.push({\n                id: agent.node,\n                label: `${agent.node}\\n(${agent.role || 'Unknown'})`,\n                shape: 'ellipse',\n                color: agent.role === 'Coordinator' ? '#00aaff' : '#cccccc'\n            });\n\n            // API node (IP layer)\n            const apiNodeId = `${agent.node}-api`;\n            nodes.push({\n                id: apiNodeId,\n                label: agent.api || 'API',\n                shape: 'box',\n                size: 10,\n                font: { size: 10 },\n                color: '#ffaa00'\n            });\n\n            // Edge from agent to API node\n            edges.push({\n                from: agent.node,\n                to: apiNodeId,\n                arrows: { to: { enabled: true, scaleFactor: 1.2 } },\n                color: { color: '#ffaa00' },\n                label: 'API'\n            });\n        });\n        //George2\n        // Inter-agent communication edges\n        for (let i = 0; i < agents.length; i++) {\n            for (let j = i + 1; j < agents.length; j++) {\n                // Election edge\n                edges.push({\n                    from: agents[i].node,\n                    to: agents[j].node,\n                    arrows: { to: { enabled: true, scaleFactor: 1.2 } },\n                    color: { color: '#00ff99' },\n                    label: 'Election'\n                });\n\n                // Heartbeat/Replication edge\n                edges.push({\n                    from: agents[j].node,\n                    to: agents[i].node,\n                    arrows: { to: { enabled: true, scaleFactor: 1.2 } },\n                    color: { color: '#ff6666' },\n                    label: 'Replication'\n                });\n\n                // Decentralized Query edge\n                edges.push({\n                    from: agents[i].node,\n                    to: agents[j].node,\n                    arrows: { to: { enabled: true, scaleFactor: 1.2 } },\n                    color: { color: '#ffaaee' },\n                    dashes: true,\n                    label: 'Decentralized Query'\n                });\n            }\n        }\n\n        const data = {\n            nodes: new vis.DataSet(nodes),\n            edges: new vis.DataSet(edges)\n        };\n\n        const options = {\n            layout: { improvedLayout: true },\n            physics: {\n                solver: \"forceAtlas2Based\",\n                forceAtlas2Based: {\n                    gravitationalConstant: -50,\n                    springLength: 300,\n                    springConstant: 0.05\n                },\n                stabilization: { iterations: 150 }\n            },\n            nodes: { font: { size: 16 } },\n            edges: {\n                width: 1.2,\n                arrows: {\n                    to: { enabled: true, scaleFactor: 1.2 }\n                },\n                smooth: {\n                    type: 'dynamic'\n                },\n                font: {\n                    align: 'middle'\n                }\n            }\n        };\n\n        network = new vis.Network(container, data, options);\n    }\n\n    scope.$watch('msg.payload.agents', function(agents) {\n        if (!agents || !Array.isArray(agents)) return;\n        renderGraph(agents);\n    });\n})(scope);\n</script>","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"local","className":"","x":500,"y":1540,"wires":[[]]},{"id":"ae39ca0ab634cbce","type":"function","z":"f78e40b03f9d5173","name":"Metrics Formatter_Split","func":"// Extract unique agents and their roles\nconst flat = msg.payload.agentLogs_flat || [];\n\nconst agentsMap = {};\nflat.forEach(entry => {\n    const id = entry.node;\n    if (!agentsMap[id]) {\n        agentsMap[id] = {\n            node: id,\n            role: entry.role || \"Unknown\"\n        };\n    }\n});\n\nmsg.payload = {\n    agents: Object.values(agentsMap)\n};\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":260,"y":1380,"wires":[["4e3f114d2ab0e093"]]},{"id":"31159392f58cb1fc","type":"debug","z":"f78e40b03f9d5173","name":"Beauty5","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":340,"y":660,"wires":[]}]