[{"id":"f78e40b03f9d5173","type":"tab","label":"OptimusDB Operations Center","disabled":false,"info":"","env":[]},{"id":"d982686d7c802b40","type":"inject","z":"f78e40b03f9d5173","name":"Trigger Logs Fetch","props":[],"repeat":"20","crontab":"","once":true,"onceDelay":"1","topic":"","x":180,"y":60,"wires":[["ec62d0ace7a78c27"]]},{"id":"ec62d0ace7a78c27","type":"function","z":"f78e40b03f9d5173","name":"Constructor","func":"const date = new Date();\n\nconst yyyy = date.getUTCFullYear();\nconst month = String(date.getUTCMonth() + 1).padStart(2, '0'); // month is 0-indexed\nconst day = String(date.getUTCDate()).padStart(2, '0');\n//const hour = String(date.getUTCHours()).padStart(2, '0');\n//const minute = String(date.getUTCMinutes()).padStart(2, '0');\nconst hour='09';\n\nconst minute='52';\n\n\n//node.warn(`Using UTC time: ${hour}:${minute} on ${yyyy}-${month}-${day}`);\n\nconst nodePorts = [18001, 18002, 18003];\n//const nodePorts = [18001];\nconst baseUrl = \"http://localhost:\";\n\nconst requests = nodePorts.map(port => ({\n    url: `${baseUrl}${port}/swarmkb/log?date=${yyyy}-${month}-${day}&hour=${hour}&minute=${minute}`,\n    node: `node-${port}`\n}));\n\nreturn [{ payload: requests }];\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":170,"y":120,"wires":[["329eddc328f60955"]]},{"id":"01e10e4eb63d625c","type":"http request","z":"f78e40b03f9d5173","name":"Fetch Logs","method":"POST","ret":"obj","paytoqs":"body","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":150,"y":300,"wires":[["528815b47a430240","489b80d414c431d2"]]},{"id":"render_table","type":"ui_template","z":"f78e40b03f9d5173","group":"dashboard_group","name":"Log Table","order":0,"width":0,"height":0,"format":"<div style=\"width: 100vw; height: 90vh; overflow-y: auto;\">\n  <table border=\"1\"\n    style=\"width: 100%; height: 100%; table-layout: auto; word-wrap: break-word; font-size: 12px; border-collapse: collapse;\">\n    <thead>\n      <tr style=\"background: #097479;\">\n        <th style=\"padding: 6px;\">A/A</th> <!-- Line number column -->\n        <th style=\"padding: 6px;\">Timestamp</th>\n        <th style=\"padding: 6px;\">Level</th>\n        <th style=\"padding: 6px;\">Message</th>\n        <th style=\"padding: 6px;\">Source</th>\n        <th style=\"padding: 6px;\">Agent ID</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr ng-repeat=\"log in msg.payload.agentLogs_flat\">\n        <td style=\"padding: 6px;\">{{log.line}}</td> <!-- A/A column -->\n        <td style=\"padding: 6px;\">{{log.timestamp}}</td>\n        <td style=\"padding: 6px;\">{{log.level}}</td>\n        <td style=\"padding: 6px;\">{{log.message}}</td>\n        <td style=\"padding: 6px;\">{{log.source}}</td>\n        <td style=\"padding: 6px;\">{{log.node}}</td>\n      </tr>\n    </tbody>\n  </table>\n</div>","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"local","className":"","x":600,"y":520,"wires":[["d3740aa9f552118b"]]},{"id":"528815b47a430240","type":"function","z":"f78e40b03f9d5173","name":"function 1","func":"if (Array.isArray(msg.payload)) {\n    let nodeId = \"unknown\";\n\n    // Extract port from URL like \"http://localhost:18003/...\"\n    const url = msg.url || \"\";\n    const match = url.match(/localhost:(\\d+)/);\n    if (match && match[1]) {\n        nodeId = `node-${match[1]}`;\n    }\n\n    msg.payload = msg.payload.map(log => {\n        log.node = nodeId;\n        return log;\n    });\n}\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":160,"y":360,"wires":[["54206c6ecacbf6e3","2d602a2b0fb95a60","0dd4bb58b1d23402","b387c0512ad670cf"]]},{"id":"329eddc328f60955","type":"split","z":"f78e40b03f9d5173","name":"splitOptimusDB","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":160,"y":180,"wires":[["444fb0fd99eefb7b"]]},{"id":"444fb0fd99eefb7b","type":"function","z":"f78e40b03f9d5173","name":"function 2","func":"msg.url = msg.payload.url;\nmsg.headers = msg.headers || {};\nmsg.headers._node = msg.payload.node;\nmsg.payload = {};\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":160,"y":240,"wires":[["01e10e4eb63d625c","526a10120ab0f1ab"]]},{"id":"526a10120ab0f1ab","type":"debug","z":"f78e40b03f9d5173","name":"debug 1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":420,"y":240,"wires":[]},{"id":"54206c6ecacbf6e3","type":"debug","z":"f78e40b03f9d5173","name":"Array_Debug","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":410,"y":360,"wires":[]},{"id":"2d602a2b0fb95a60","type":"function","z":"f78e40b03f9d5173","name":"Live Log Formatter","func":"const logs = Array.isArray(msg.payload) ? msg.payload : [];\nconst previous = context.get(\"logBuffer\") || [];\nconst agentMap = {}; // map of node => logs array\n\nlogs.forEach(log => {\n    const timestamp = log.timestamp || \"N/A\";\n    const level = (log.level || \"INFO\").padEnd(10, \" \");\n    const node = (log.node || \"unknown\").padEnd(12, \" \");\n    const rawNode = log.node || \"unknown\";\n    const message = log.message || \"\";\n\n    // Format line with indentation for multiline messages\n    const formattedMessage = message\n        .split(\"\\n\")\n        .map((line, idx) => idx === 0 ? line : \"    \" + line)\n        .join(\"\\n\");\n\n    const line = `[${timestamp}] [${level}] [${node}] ${formattedMessage}`;\n    previous.push(line);\n\n    // Store per-agent log line\n    if (!agentMap[rawNode]) agentMap[rawNode] = [];\n    agentMap[rawNode].push(line);\n});\n\n// Limit live buffer to last 100 lines\nif (previous.length > 100) previous.splice(0, previous.length - 100);\ncontext.set(\"logBuffer\", previous);\n\n// Convert map to array for UI\nconst agentLogs = Object.entries(agentMap).map(([node, logLines]) => ({\n    node,\n    logs: logLines.join(\"\\n\\n\")\n}));\n\nmsg.payload = {\n    live: previous.join(\"\\n\\n\"),\n    agentLogs\n};\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":440,"wires":[["4eccceb2a6917e42"]]},{"id":"4eccceb2a6917e42","type":"debug","z":"f78e40b03f9d5173","name":"Beauty1","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":960,"y":440,"wires":[]},{"id":"489b80d414c431d2","type":"debug","z":"f78e40b03f9d5173","name":"Fetched details_Debug","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":440,"y":300,"wires":[]},{"id":"0dd4bb58b1d23402","type":"function","z":"f78e40b03f9d5173","name":"Live Log Formatter2","func":"const logs = Array.isArray(msg.payload) ? msg.payload : [];\n\nconst buffer = context.get(\"logBuffer\") || [];\nconst tableData = context.get(\"tableBuffer\") || [];\nlet lineNumber = context.get(\"logLineNumber\") || 1;\n\nlogs.forEach(log => {\n    const line = `[${lineNumber}] [${log.timestamp}] [${log.level || 'INFO'}] [${log.node || 'unknown'}] ${log.message}`;\n    buffer.push(line);\n\n    tableData.push({\n        line: lineNumber,\n        timestamp: log.timestamp,\n        level: log.level || 'INFO',\n        message: log.message || '',\n        source: log.source || '',\n        node: log.node || 'unknown'\n    });\n\n    lineNumber++;\n});\n\n// Trim history to last 100\nif (buffer.length > 100) buffer.splice(0, buffer.length - 100);\nif (tableData.length > 100) tableData.splice(0, tableData.length - 100);\n\n// Save context\ncontext.set(\"logBuffer\", buffer);\ncontext.set(\"tableBuffer\", tableData);\ncontext.set(\"logLineNumber\", lineNumber);\n\n// Final output\nmsg.payload = {\n    live: buffer.join(\"\\n\"),\n    agentLogs_flat: tableData\n};\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":170,"y":520,"wires":[["render_table","a1115bcab8cb67dd"]]},{"id":"de8eed0e29804134","type":"debug","z":"f78e40b03f9d5173","name":"Beauty5","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":180,"y":1080,"wires":[]},{"id":"d3740aa9f552118b","type":"debug","z":"f78e40b03f9d5173","name":"Beauty4","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":860,"y":520,"wires":[]},{"id":"a5_ui_linechart","type":"ui_chart","z":"f78e40b03f9d5173","name":"CPU/MEM/Latency Chart","group":"agent_ui_group","order":3,"width":6,"height":6,"label":"Performance","chartType":"line","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"100","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":930,"y":700,"wires":[[]]},{"id":"a6_ui_barchart","type":"ui_chart","z":"f78e40b03f9d5173","name":"Bar Metrics","group":"agent_ui_group","order":2,"width":5,"height":6,"label":"Replication & IO","chartType":"bar","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":730,"y":760,"wires":[[]]},{"id":"a7_ui_role","type":"ui_text","z":"f78e40b03f9d5173","group":"agent_ui_group","order":1,"width":4,"height":1,"name":"Node Role","label":"Agent Role","format":"{{msg.payload.role}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":720,"y":640,"wires":[]},{"id":"a1115bcab8cb67dd","type":"debug","z":"f78e40b03f9d5173","name":"Beauty3","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":460,"y":580,"wires":[]},{"id":"b387c0512ad670cf","type":"function","z":"f78e40b03f9d5173","name":"Metrics Formatter","func":"const logs = Array.isArray(msg.payload) ? msg.payload : [];\n\n//const buffer = context.get(\"logBuffer\") || [];\nconst tableData = context.get(\"tableBuffer\") || [];\n\n\nlogs.forEach(log => {\n\n    tableData.push({\n        timestamp: log.timestamp,\n        //level: log.level || 'INFO',\n        //message: log.message || '',\n        source: log.source || '',\n        node: log.node || 'unknown',\n        cpu: +(Math.random() * 100).toFixed(2),\n        mem: +(Math.random() * 100).toFixed(2),\n        latency: +(Math.random() * 250).toFixed(2),\n        health: +(Math.random() * 100).toFixed(2),\n        replication: Math.floor(Math.random() * 1000),\n        io: +(Math.random() * 100).toFixed(2),\n        queryRate: +(Math.random() * 50).toFixed(2),\n        role: Math.random() > 0.5 ? 'Coordinator' : 'Follower'\n    });\n});\n\ncontext.set(\"tableBuffer\", tableData);\n\n\n// Final output\nmsg.payload = {\n    agentLogs_flat: tableData\n};\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":90,"y":680,"wires":[["4c8a2c445896de98"]]},{"id":"4c8a2c445896de98","type":"function","z":"f78e40b03f9d5173","name":"Metrics Formatter_Split","func":"const logs = msg.payload.agentLogs_flat || [];\nconst grouped = {};\n\nlogs.forEach(log => {\n    if (!grouped[log.node]) grouped[log.node] = [];\n    grouped[log.node].push(log);\n});\n\nconst outputs = Object.entries(grouped).map(([node, entries]) => {\n    return { payload: entries, topic: node };\n});\n\nreturn [outputs];\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":140,"y":820,"wires":[["de8eed0e29804134","b70ea7517c73c5b0"]]},{"id":"a4_ui_gauge","type":"ui_gauge","z":"f78e40b03f9d5173","name":"Health Gauge","group":"agent_ui_group","order":5,"width":4,"height":4,"gtype":"gage","title":"Health","label":"%","format":"{{value}}","min":0,"max":100,"colors":["#00b500","#e6e600","#ca3838"],"seg1":"65","seg2":"85","diff":false,"className":"","x":730,"y":700,"wires":[]},{"id":"60b9fca56574e64b","type":"ui_text","z":"f78e40b03f9d5173","group":"agent_ui_group","order":4,"width":4,"height":1,"name":"Agent Name","label":"Agent Name","format":"{{msg.payload.node}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":890,"y":640,"wires":[]},{"id":"0da6942dfe0c11c3","type":"split","z":"f78e40b03f9d5173","name":"","splt":"topic","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":510,"y":740,"wires":[["a7_ui_role","60b9fca56574e64b","a4_ui_gauge","a5_ui_linechart","a6_ui_barchart"]]},{"id":"b70ea7517c73c5b0","type":"switch","z":"f78e40b03f9d5173","name":"","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"node-18001","vt":"str"},{"t":"eq","v":"node-18002","vt":"str"},{"t":"eq","v":"node-18003","vt":"str"},{"t":"eq","v":"node-18004","vt":"str"},{"t":"eq","v":"node-18005","vt":"str"}],"checkall":"true","repair":false,"outputs":5,"x":350,"y":760,"wires":[["0da6942dfe0c11c3"],["6f1a764dca60985f"],["9e4dd9e2acc47647"],[],[]]},{"id":"da31541aa76e3dac","type":"ui_chart","z":"f78e40b03f9d5173","name":"CPU/MEM/Latency Chart","group":"41ccaa960f570aea","order":3,"width":5,"height":6,"label":"Performance","chartType":"line","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"100","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":910,"y":920,"wires":[[]]},{"id":"ad0a019426ba5cdf","type":"ui_chart","z":"f78e40b03f9d5173","name":"Bar Metrics","group":"41ccaa960f570aea","order":2,"width":5,"height":6,"label":"Replication & IO","chartType":"bar","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":710,"y":980,"wires":[[]]},{"id":"14241fb6d21c84ad","type":"ui_text","z":"f78e40b03f9d5173","group":"41ccaa960f570aea","order":1,"width":5,"height":1,"name":"Node Role","label":"Agent Role","format":"{{msg.payload.role}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":700,"y":860,"wires":[]},{"id":"22b9486a395bbcd2","type":"ui_gauge","z":"f78e40b03f9d5173","name":"Health Gauge","group":"41ccaa960f570aea","order":5,"width":5,"height":4,"gtype":"gage","title":"Health","label":"%","format":"{{value}}","min":0,"max":100,"colors":["#00b500","#e6e600","#ca3838"],"seg1":"65","seg2":"85","diff":false,"className":"","x":710,"y":920,"wires":[]},{"id":"d529ea1ff53bc066","type":"ui_text","z":"f78e40b03f9d5173","group":"41ccaa960f570aea","order":4,"width":5,"height":1,"name":"Agent Name","label":"Agent Name","format":"{{msg.payload.node}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":870,"y":860,"wires":[]},{"id":"6f1a764dca60985f","type":"split","z":"f78e40b03f9d5173","name":"","splt":"topic","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":490,"y":920,"wires":[["14241fb6d21c84ad","d529ea1ff53bc066","22b9486a395bbcd2","da31541aa76e3dac","ad0a019426ba5cdf"]]},{"id":"2ee2ec2fdbbbcd8a","type":"ui_chart","z":"f78e40b03f9d5173","name":"CPU/MEM/Latency Chart","group":"1359ef53a46a65a7","order":3,"width":5,"height":6,"label":"Performance","chartType":"line","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"100","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":910,"y":1100,"wires":[[]]},{"id":"674f362bf2193eff","type":"ui_chart","z":"f78e40b03f9d5173","name":"Bar Metrics","group":"1359ef53a46a65a7","order":2,"width":6,"height":6,"label":"Replication & IO","chartType":"bar","legend":"true","xformat":"auto","interpolate":"linear","nodata":"No data","dot":false,"ymin":"0","ymax":"","removeOlder":1,"removeOlderPoints":"100","removeOlderUnit":"3600","cutout":0,"useOneColor":false,"useUTC":false,"colors":["#1f77b4","#aec7e8","#ff7f0e","#2ca02c","#98df8a","#d62728","#ff9896","#9467bd","#c5b0d5"],"outputs":1,"useDifferentColor":false,"className":"","x":710,"y":1160,"wires":[[]]},{"id":"5fc8e830376177b5","type":"ui_text","z":"f78e40b03f9d5173","group":"1359ef53a46a65a7","order":1,"width":4,"height":1,"name":"Node Role","label":"Agent Role","format":"{{msg.payload.role}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":700,"y":1040,"wires":[]},{"id":"9c06f591e9db353c","type":"ui_gauge","z":"f78e40b03f9d5173","name":"Health Gauge","group":"1359ef53a46a65a7","order":5,"width":4,"height":4,"gtype":"gage","title":"Health","label":"%","format":"{{value}}","min":0,"max":100,"colors":["#00b500","#e6e600","#ca3838"],"seg1":"65","seg2":"85","diff":false,"className":"","x":710,"y":1100,"wires":[]},{"id":"85778d7ece28033e","type":"ui_text","z":"f78e40b03f9d5173","group":"1359ef53a46a65a7","order":4,"width":4,"height":1,"name":"Agent Name","label":"Agent Name","format":"{{msg.payload.node}}","layout":"col-center","className":"","style":false,"font":"","fontSize":"","color":"#000000","x":870,"y":1040,"wires":[]},{"id":"9e4dd9e2acc47647","type":"split","z":"f78e40b03f9d5173","name":"","splt":"topic","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":490,"y":1100,"wires":[["5fc8e830376177b5","85778d7ece28033e","9c06f591e9db353c","2ee2ec2fdbbbcd8a","674f362bf2193eff"]]},{"id":"dashboard_group","type":"ui_group","name":"Agents Timeline of Events","tab":"072343ae4ed21cf8","order":1,"disp":true,"width":"38","collapse":false,"className":""},{"id":"agent_ui_group","type":"ui_group","name":"Agent #1 Metrics","tab":"5fead54e98583d5c","order":1,"disp":true,"width":15,"collapse":false,"className":""},{"id":"41ccaa960f570aea","type":"ui_group","name":"Agent #2 Metrics","tab":"5fead54e98583d5c","order":2,"disp":true,"width":15,"collapse":false,"className":""},{"id":"1359ef53a46a65a7","type":"ui_group","name":"Agent #3 Metrics","tab":"5fead54e98583d5c","order":3,"disp":true,"width":15,"collapse":false,"className":""},{"id":"072343ae4ed21cf8","type":"ui_tab","name":"OptimusDB Agents Log Timeline","icon":"dashboard","disabled":false,"hidden":false},{"id":"5fead54e98583d5c","type":"ui_tab","name":"Agents Overview","icon":"dashboard","disabled":false,"hidden":false}]